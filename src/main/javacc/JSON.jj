                                                            options {
                                                              UNICODE_INPUT=true;
                                                              STATIC=false;
                                                            }

                                                            PARSER_BEGIN(JSON)

                                                            package de.bottlecaps.rex.benchmark.json.javacc;

                                                            import com.fasterxml.jackson.databind.JsonNode;
                                                            import com.fasterxml.jackson.databind.node.ArrayNode;
                                                            import com.fasterxml.jackson.databind.node.JsonNodeFactory;
                                                            import com.fasterxml.jackson.databind.node.ObjectNode;
                                                            import com.fasterxml.jackson.databind.node.TextNode;
                                                            import de.bottlecaps.rex.benchmark.json.parsers.ResultFactory;
                                                            import java.util.Stack;

                                                            public class JSON {
                                                              private StringBuilder sb = new StringBuilder();

                                                              protected JsonNode value;
                                                              private JsonNodeFactory factory = ResultFactory.getJsonNodeFactory();
                                                              private Stack<ArrayNode> arrays = new Stack<ArrayNode>();
                                                              private Stack<ObjectNode> objects = new Stack<ObjectNode>();

                                                              public JsonNode getValue() {
                                                                return value;
                                                              }

                                                              private String unhex(String value) {
                                                                return Character.valueOf((char) Integer.parseInt(value, 16)).toString();
                                                              }
                                                            }

                                                            PARSER_END(JSON)
<DEFAULT> SKIP: { " " | "\t" | "\n" | "\r" }

<DEFAULT> TOKEN:
{
  <BEGIN_STRING: "\"" > : STRING
| <DOUBLE: <INTEGER> ( <FRAC> ( <EXP> )? | ( <FRAC> )? <EXP> ) >
| <INTEGER: ( "-" )? ( <DIGIT> | <ONENINE> <DIGITS> ) >
| <#DIGITS: ( <DIGIT> )+ >
| <#DIGIT: "0" | <ONENINE> >
| <#ONENINE: ["1"-"9"] >
| <#FRAC: "." <DIGITS> >
| <#EXP: ( "E" | "e" ) <SIGN> <DIGITS> >
| <#SIGN: ( "+" | "-" )? >
}

<STRING> TOKEN:
{
  <END_STRING: "\"" > : DEFAULT
| <CHARACTERS: ( ["\u0020"-"\u0021"] | ["\u0023"-"\u005B"] | ["\u005D"-"\uFFFE"] )+ >
| <ESCAPE_QUOTE: "\\\"" >
| <ESCAPE_BACKSLASH: "\\\\" >
| <ESCAPE_SLASH: "\\/" >
| <ESCAPE_B: "\\b" >
| <ESCAPE_F: "\\f" >
| <ESCAPE_N: "\\n" >
| <ESCAPE_R: "\\r" >
| <ESCAPE_T: "\\t" >
| <ESCAPE_UNICODE: "\\u" <HEX> <HEX> <HEX> <HEX> >
| <#HEX: ["0"-"9", "A"-"F", "a"-"f"] >
}

void json() : {}
{
  value() <EOF>
}

void value() : {}
{
    object()                                                {value = objects.pop();}
  | array()                                                 {value = arrays.pop();}
  | string()                                                {value = factory.textNode(sb.toString());}
  | <INTEGER>                                               {
                                                              try {
                                                                value = factory.numberNode(Integer.parseInt(token.image));
                                                              }
                                                              catch (NumberFormatException e) {
                                                                value = factory.numberNode(Long.parseLong(token.image));
                                                              }
                                                            }
  | <DOUBLE>                                                {value = factory.numberNode(Double.parseDouble(token.image));}
  | "true"                                                  {value = factory.booleanNode(true);}
  | "false"                                                 {value = factory.booleanNode(false);}
  | "null"                                                  {value = factory.nullNode();}
}

void object() : {}
{                                                           {objects.push(factory.objectNode());}
  "{" ( member() ( "," member() )* )? "}"
}

void member() : {}
{
  string()                                                  {String key = sb.toString();}
           ":" value()                                      {objects.peek().set(key, value);}
}

void array() : {}
{                                                           {arrays.push(factory.arrayNode());}
  "[" ( element() ( "," element() )* )? "]"
}

void element() : {}
{
  value()                                                   {arrays.peek().add(value);}
}

void string() : {}
{                                                           {sb.setLength(0);}
  <BEGIN_STRING>
  ( <CHARACTERS>                                            {sb.append(token.image);}
  | escape()
  )*
  <END_STRING>
}

void escape() :{}
{
    <ESCAPE_QUOTE>                                          {sb.append("\"");}
  | <ESCAPE_BACKSLASH>                                      {sb.append("\\");}
  | <ESCAPE_SLASH>                                          {sb.append("/");}
  | <ESCAPE_B>                                              {sb.append("\b");}
  | <ESCAPE_F>                                              {sb.append("\f");}
  | <ESCAPE_N>                                              {sb.append("\n");}
  | <ESCAPE_R>                                              {sb.append("\r");}
  | <ESCAPE_T>                                              {sb.append("\t");}
  | <ESCAPE_UNICODE>                                        {sb.append(unhex(token.image.substring(2)));}
}